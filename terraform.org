#+TITLE: Terraform
* Table of Contents                                                :TOC_2_gh:
 - [[#usage][Usage]]
 - [[#concepts][Concepts]]
   - [[#terraform-files][Terraform files]]
   - [[#resources-and-data-sources][Resources and Data Sources]]
   - [[#state-file][State file]]
   - [[#variable-files][Variable files]]
   - [[#resource-addressing][Resource Addressing]]
   - [[#interpolation][Interpolation]]
 - [[#ignore_changes][ignore_changes]]
 - [[#dynamic-interpolation-cant-be-used-over-count][Dynamic interpolation can't be used over ~count~]]
 - [[#change-an-aws-ec2-instance-type-without-destroying-recreating-it][Change an AWS ec2 instance type without destroying-recreating it]]

* Usage
#+BEGIN_SRC shell
  $ terraform plan

  # Passing variables as runtime arguments
  $ terraform plan -var 'access_key=foo' -var 'secret_key=bar'
  $ terraform plan -var 'amis={ us-east-1 = "foo", us-west-2 = "bar" }'

  $ terraform plan -out=my.plan

  $ terraform apply
  $ terraform apply 'my.plan'  # pass plan output file to ensure what happens

  $ terraform import aws_instance.my_server i-abcd1234
#+END_SRC
* Concepts
** Terraform files
- All ~.tf~ files are loaded
- ~.tf~ files are declarative, so the order of loading files doesn't matter, except for Override files
- Override files are ~.tf~ files named as ~override.tf~ or ~{name}_override.tf~
- Override files are loaded last in alphabetical order
- Configurations in override files are *merged into the existing configuration*, not appended.

** Resources and Data Sources
- *Resources* are infrastructures managed by ~terraform~
- *Data sources* are not managed by ~terraform~

The use case of these things are following:
#+BEGIN_QUOTE
You can provision servers by defining them as *resources*.\\
For specifying server configurations,
you can reference existing security groups, VPCs, and the like by defining them as *data sources*.
#+END_QUOTE

** State file
- State about the real managed infrastructure
- ~terraform.tfstate~ by default
- Formatted in ~json~
- While terraform files are about *to be*, state file is about *as is*
- State is refreshed before performing most of operations like ~terraform plan~, ~terraform apply~
- Basic modifications can be done through ~terraform state [sub]~ commands
- Importing existing infrastructures can be done using ~terraform state import~
  - Importing is related to ~resources~, not ~data sources~
  - Which means ~terraform~ can destroy the existing infrastructures once they are imported

** Variable files
- A file named ~terraform.tfvars~ is automatically loaded
- Use ~-var-file~ flag to specify other ~.tfvars~ files

** Resource Addressing
- https://www.terraform.io/docs/commands/state/addressing.html
- 
#+BEGIN_EXAMPLE
  [module path][resource spec]
  module.A.module.B.module.C...
  resource_type.resource_name[N]
#+END_EXAMPLE

#+BEGIN_EXAMPLE
  resource "aws_instance" "web" {
    # ...
    count = 4
  }
  aws_instance.web[3]
  aws_instance.web
#+END_EXAMPLE

** Interpolation
- https://www.terraform.io/docs/configuration/interpolation.html
 
#+BEGIN_EXAMPLE
  ${self.private_ip_address}  # attributes of their own
  ${aws_instance.web.id}
  ${aws_instance.web.0.id}    # a specific one when the resource is plural('count' attribute exists)
  ${aws_instance.web.*.id}    # this is a list
  ${module.foo.bar}           # outputs from module
  .. and many more including some functions
#+END_EXAMPLE

* ignore_changes
There was a problem when I defined multiple ~aws_eip~ s which are associated to ~aws_instance~ s.

#+BEGIN_EXAMPLE
  resource "aws_instance" "foo" {
    count = 10
    ..
  }

  resource "aws_eip" "bar" {
    count = 10
    instance = "${element(aws_instance.foo.*.i, count.index}"
  }
#+END_EXAMPLE

Terraform plans to change the all association when I only change the ~count~.
To work around this, use ~ignore_changes~

#+BEGIN_EXAMPLE
  resource "aws_eip" "bar" {
    count = 10
    instance = "${element(aws_instance.foo.*.i, count.index}"
    lifecycle {
      ignore_changes = ["instance"]
    }
  }
#+END_EXAMPLE

- https://www.terraform.io/docs/configuration/resources.html
- https://github.com/hashicorp/terraform/issues/4944

* Dynamic interpolation can't be used over ~count~
For now, you can't use interpolation for referencing other resources
to specify ~count~ because of the way that terraform handles ~count~.

#+BEGIN_EXAMPLE
  variable my_count { 
    default = 10
  }

  resource "something" "foo" {
    count = "${var.my_count}"   # ok
  }

  resource "something" "bar" {
    count = "${something.foo.count}"  # error
  }
#+END_EXAMPLE

#+BEGIN_QUOTE
We should definitely do this,
the tricky part comes from the fact that count expansion is currently done statically,
before the primary graph walk, which means we can't support "computed" counts right now.
(A "computed" value in TF is one that's flagged as not known until all its dependencies are calculated.)
#+END_QUOTE

- https://github.com/hashicorp/terraform/issues/1497#issuecomment-105874601 

* Change an AWS ec2 instance type without destroying-recreating it
- https://github.com/hashicorp/terraform/issues/1579
- https://github.com/hashicorp/terraform/issues/2423

Terraform currently doesn't support changing the instance type without destroying-recreating it.

We should change it manually, and sync it with the terraform state
to change the instance type without destroying the instance.

-----

For syncing, you have to remove its state from ~tfstate~ and ~import~ it again.
Follow the steps below:

1. Stop the target instance and change its instance type to what you desire.
   [[file:img/screenshot_2017-01-31_13-41-13.png]] 

2. Update your ~tf~ file as you changed:
  #+BEGIN_EXAMPLE
    resource "aws_instance" "my_instance" {
      (...)
      instance_type = "t2.mirco"  # as you changed at step 1 
      (...)
    }
  #+END_EXAMPLE

3. Verify it with ~terraform plan~
  #+BEGIN_EXAMPLE
    $ terraform plan
    (...)

    No changes. Infrastructure is up-to-date. This means that Terraform
    could not detect any differences between your configuration and
    the real physical resources that exist. As a result, Terraform
    doesn't need to do anything.
  #+END_EXAMPLE

-----

If ~plan~ shows some unexpected changes, you can just remove the instance from tfstate and re-import it.

1. Remove the instance from ~terraform.tfstate~:
   #+BEGIN_EXAMPLE
     $ terraform state rm aws_instance.my_instance
   #+END_EXAMPLE

2. Import your instance
  #+BEGIN_EXAMPLE
    $ terraform import aws_instance.my_instance i-abcdefg012345678
  #+END_EXAMPLE
